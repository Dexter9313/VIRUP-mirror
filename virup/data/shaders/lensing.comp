#version 420 core
#extension GL_ARB_compute_shader : enable

layout (local_size_x = LOCAL_SIZE_2D_X, local_size_y = LOCAL_SIZE_2D_Y) in;

// An image to store data into.
layout (rgba32f, binding = 0) readonly uniform image2D dataIn;
layout (rgba32f, binding = 1) writeonly uniform image2D dataOut;

const float PI = 3.1415926535;

uniform float aspectRatio;
uniform float lenseSize;
uniform vec4 lenseScreenCoord;
uniform float lenseDist;
uniform float radiusLimit;

uniform sampler2D distortionMap;

vec2 Distort(vec2 p)
{
	vec4 highpval = texture2D(distortionMap, p * 0.5 + 0.5);
	float x = highpval.r + (highpval.b / 255.0);
	float y = highpval.g + (highpval.a / 255.0);
	return vec2(x, y) * 2.0 - 1.0;
}

void main()
{
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	vec2 globalSize = vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy);
	vec2 texCoord = vec2(gl_GlobalInvocationID.xy) / globalSize;
	vec2 center = lenseScreenCoord.xy * 0.5 + vec2(0.5);
	vec2 xy     = 2.0 * (texCoord - center + vec2(0.5)) - 1.0;
	xy.y /= aspectRatio;
	xy *= lenseDist / lenseSize;

	vec2 uv;
	float d = length(xy);
	if(d <= 0.025)
	{
		imageStore(dataOut, pixel_coords, vec4(vec3(0.0), 1.0));
		return;
	}
	if(xy.x > -1 && xy.x < 1 && xy.y > -1 && xy.y < 1
	   && lenseScreenCoord.z > -1.0 && lenseScreenCoord.z < 1.0)
	{
		uv = Distort(xy);
		uv /= lenseDist / lenseSize;
		uv.y *= aspectRatio;
		uv = (uv + 1.0) / 2.0 - vec2(0.5) + center;

		if(d > radiusLimit)
		{
			float a = (d - radiusLimit) / (1 - radiusLimit);
			uv = mix(uv, texCoord, clamp(a, 0.0, 1.0));
		}
	}
	else
	{
		uv = texCoord;
	}

	// bilinear interpolation
	ivec2 fetch_floor = ivec2(floor(globalSize * uv));
	vec2 fetch_fract = fract(globalSize * uv);

	vec4 res00 = imageLoad(dataIn, fetch_floor);
	vec4 res01 = imageLoad(dataIn, fetch_floor + ivec2(0, 1));
	vec4 res10 = imageLoad(dataIn, fetch_floor + ivec2(1, 0));
	vec4 res11 = imageLoad(dataIn, fetch_floor + ivec2(1, 1));

	vec4 result = res00 * (1.0 - fetch_fract.x) * (1.0 - fetch_fract.y);
	result += res01 * (1.0 - fetch_fract.x) * fetch_fract.y;
	result += res10 * fetch_fract.x * (1.0 - fetch_fract.y);
	result += res11 * fetch_fract.x * fetch_fract.y;

	imageStore(dataOut, pixel_coords, result);
}
